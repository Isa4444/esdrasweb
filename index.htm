<!DOCTYPE html>
<html lang="en">
<head>
  <meta name="referrer" content="origin">
  <meta charset="UTF-8" />
  <title>BuelvasWeb</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" href="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg" type="image/svg+xml" />

  <meta name="description" content="Esdras Buelvas – Future software engineer passionate about Python and web development.">
  <meta name="keywords" content="Esdras, Buelvas, software engineer, HTML, Python, web development, portfolio">
  <meta name="author" content="Esdras Buelvas">

  <meta property="og:title" content="BuelvasWeb – Developer Portfolio">
  <meta property="og:description" content="Welcome to my personal website where I share who I am and what I build.">
  <meta property="og:image" content="https://visualstudiomagazine.com/-/media/ECG/visualstudiomagazine/Images/introimages/12122012MultiThreadGlobalization.jpg">
  <meta property="og:url" content="https://buelvasweb.com">
  <meta property="og:type" content="website">

  <style>
    :root{
      --bg-dark: url('https://i.imgur.com/pUrhAdr.png');
      --bg-light: url('https://images.unsplash.com/photo-1504384308090-c894fdcc538d');
      --text-dark: #ffffff;
      --text-light: #222222;
      --box-dark: rgba(0, 0, 0, 0.7);
      --box-light: rgba(255, 255, 255, 0.9);
      --accent-dark: #00ccff;
      --accent-light: #0077cc;
      --link-dark: #ffcc00;
      --link-light: #cc6600;

      /* particle colors (high contrast to verify) */
      --dot:#ffffff;
      --line:#ffffff;
    }
    body.light-mode{
      /* darker lines on light bg */
      --dot:#2b3a73;
      --line:#1f2b58;
    }

    *{margin:0;padding:0;box-sizing:border-box;}
    html,body{
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: var(--bg-dark) no-repeat center center fixed;
      background-size: cover;
      color: var(--text-dark);
      scroll-behavior: smooth;
      transition: background 0.5s ease, color 0.3s ease;
      min-height: 100%;
    }
    body.light-mode{
      background: var(--bg-light) no-repeat center center fixed;
      background-size: cover;
      color: var(--text-light);
    }

    /* PARTICLE LAYER (above bg, behind content) */
    #particles-wrap{
      position: fixed; inset: 0; z-index: 0; pointer-events: none;
      /* subtle vignette to lift contrast on bright images */
      background: radial-gradient(1200px 800px at 70% 20%,
        rgba(9,13,27,0.35) 0%, rgba(6,9,18,0.25) 45%, rgba(0,0,0,0.15) 100%);
    }
    #particles{width:100%;height:100%;display:block;}

    nav{
      position: sticky; top: 0; width: 100%;
      background-color: rgba(0,0,0,0.8);
      display: flex; justify-content: center;
      padding: 1rem; z-index: 1000;
    }
    /* ensure content sits above particles */
    nav, .section { position: relative; z-index: 1; }

    nav a{
      margin: 0 15px; color: #fff; text-decoration: none;
      font-weight: bold; transition: color 0.3s;
    }
    nav a:hover{ color: var(--accent-dark); }

    .theme-toggle{
      position: fixed; top: 20px; right: 20px;
      font-size: 1.4rem; background: none; border: none;
      cursor: pointer; color: inherit; z-index: 1001;
    }

    .section{
      max-width: 900px; margin: 80px auto;
      background-color: var(--box-dark);
      padding: 40px; border-radius: 16px; text-align: center;
      box-shadow: 0 0 20px rgba(0,0,0,0.4);
    }
    body.light-mode .section{ background-color: var(--box-light); }

    h1,h2{ color: var(--accent-dark); }
    body.light-mode h1, body.light-mode h2{ color: var(--accent-light); }

    a{ color: var(--link-dark); }
    body.light-mode a{ color: var(--link-light); }

    .logo{ width: 60px; display:block; margin:0 auto 20px; }

    .typing{ font-size:1.2rem; margin-top:20px; font-style:italic; color:#ccc; }

    .projects,.skills{
      display:grid; grid-template-columns: repeat(auto-fit, minmax(250px,1fr));
      gap:20px; margin-top:20px;
    }
    .card{
      background-color: rgba(255,255,255,0.1);
      padding: 20px; border-radius: 12px; text-align: left; transition: background 0.3s;
    }
    .card:hover{ background-color: rgba(255,255,255,0.2); }

    .skill-bar{ background:#333; border-radius:8px; overflow:hidden; margin-top:10px; }
    .skill-level{ height:10px; background: var(--accent-dark); }

    form input, form textarea{
      width:100%; padding:10px; margin-top:10px; border:none; border-radius:6px;
    }
    form button{
      margin-top:10px; padding:10px 20px; background: var(--accent-dark);
      color:#fff; border:none; border-radius:6px; cursor:pointer;
    }

    footer{ text-align:center; margin:50px 0 20px; color:#aaa; }
  </style>
</head>
<body>

  <button class="theme-toggle" onclick="toggleTheme()" title="Toggle Theme">
    <span id="themeIcon">🌙</span>
  </button>

  <nav>
    <a href="#about">About</a>
    <a href="#projects">Projects</a>
    <a href="#skills">Skills</a>
    <a href="#contact">Contact</a>
  </nav>

  
  <div id="particles-wrap"><canvas id="particles"></canvas></div>

  <section id="about" class="section">
    <img src="https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg" alt="Logo" class="logo">
    <h1>Welcome to BuelvasWeb</h1>
    <p>I’m Esdras, passionate about web development and Python. I’m building my future, one project at a time (while probably avoiding math homework 😅).</p>
    <div class="typing" id="typingText"></div>
  </section>

  <section id="skills" class="section">
    <h2>Skills</h2>
    <div class="skills">
      <div>
        <strong>HTML</strong>
        <div class="skill-bar"><div class="skill-level" style="width: 90%"></div></div>
      </div>
      <div>
        <strong>Python</strong>
        <div class="skill-bar"><div class="skill-level" style="width: 50%"></div></div>
      </div>
      <div>
        <strong>CSS</strong>
        <div class="skill-bar"><div class="skill-level" style="width: 90%"></div></div>
      </div>
    </div>
  </section>

  <section id="projects" class="section">
    <h2>Projects</h2>
    <div class="projects">
      <div class="card">
        <h3>Lucien</h3>
        <p>Personal AI named Lucien lord of Starugerth. In progress...</p>
      </div>
      <div class="card">
        <h3>Book</h3>
        <p>The Unwritten Book of Bushido — A story of a peasant boy whose bravery entitles him on a journey to become what he admires most: a samurai. In a world governed by honor and glory, he must write his own path in a book that was never meant to be written.</p>
      </div>
    </div>
  </section>

  <section id="contact" class="section">
    <h2>Contact Me</h2>
    <form action="https://formspree.io/f/mpwpvprw" method="POST">
      <input type="text" name="name" placeholder="Your Name" required />
      <input type="email" name="email" placeholder="Your Email" required />
      <textarea name="message" placeholder="Your Message" rows="4" required></textarea>
      <button type="submit">Send</button>
    </form>
  </section>


  <footer>&copy; 2025 Esdras Buelvas. All rights reserved.</footer>

  <script>
    function toggleTheme() {
      const body = document.body;
      const icon = document.getElementById("themeIcon");
      body.classList.toggle("light-mode");
      const isLight = body.classList.contains("light-mode");
      icon.textContent = isLight ? "🌙" : "☀️";
      localStorage.setItem("theme", isLight ? "light" : "dark");
    }

    window.onload = () => {
      const savedTheme = localStorage.getItem("theme") || "dark";
      if (savedTheme === "light") document.body.classList.add("light-mode");
      document.getElementById("themeIcon").textContent = savedTheme === "light" ? "🌙" : "☀️";

      const phrases = [
        "I love building things with code.",
        "Currently learning full-stack development.",
        "Writing a book & dreaming big."
      ];
      let index = 0;
      const typingText = document.getElementById("typingText");
      function typeLine() {
        typingText.textContent = phrases[index];
        index = (index + 1) % phrases.length;
        setTimeout(typeLine, 3000);
      }
      typeLine();
    };


    (() => {
      console.log('[Particles] boot');
      const canvas = document.getElementById('particles');
      if (!canvas) { console.warn('No #particles canvas found'); return; }
      const ctx = canvas.getContext('2d');

      const cfg = {
        count: 90,
        countMobile: 55,
        maxSpeed: 0.45,
        linkDist: 130,
        lineAlpha: 0.5,
        dotMin: 1.2,
        dotMax: 2.4
      };

      const reduce = matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (reduce) { 
        cfg.maxSpeed = 0.25;
        cfg.linkDist = 110;
        cfg.count = 70;
        cfg.countMobile = 40;
      }

      let parts = [], mouse = { x:null, y:null };

      function resize(){
        const ratio = Math.min(2, window.devicePixelRatio || 1);
        canvas.width  = Math.floor(canvas.clientWidth  * ratio);
        canvas.height = Math.floor(canvas.clientHeight * ratio);
        ctx.setTransform(ratio,0,0,ratio,0,0);
      }
      function rand(a,b){ return a + Math.random()*(b-a); }

      class P {
        constructor() { this.spawn(true); }
        spawn(random=true){
          this.x = random ? rand(0, canvas.clientWidth)  : (Math.random()<0.5 ? 0 : canvas.clientWidth);
          this.y = random ? rand(0, canvas.clientHeight) : rand(0, canvas.clientHeight);
          const ang = rand(0, Math.PI*2), spd = rand(cfg.maxSpeed*0.4, cfg.maxSpeed);
          this.vx = Math.cos(ang)*spd; this.vy = Math.sin(ang)*spd;
          this.r  = rand(cfg.dotMin, cfg.dotMax);
        }
        step(){
          if (mouse.x != null) {
            const dx = mouse.x - this.x, dy = mouse.y - this.y;
            const d = Math.hypot(dx,dy);
            if (d < 140 && d > 0) {
              this.vx += (dx/d) * 0.01;
              this.vy += (dy/d) * 0.01;
            }
          }
          this.x += this.vx; this.y += this.vy;
          if (this.x < 0 || this.x > canvas.clientWidth)  this.vx *= -1;
          if (this.y < 0 || this.y > canvas.clientHeight) this.vy *= -1;
        }
        draw(){
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.r, 0, Math.PI*2);
          const dot = getComputedStyle(document.documentElement).getPropertyValue('--dot').trim() || '#fff';
          ctx.fillStyle = dot;
          ctx.fill();
        }
      }

      function connect(){
        const line = getComputedStyle(document.documentElement).getPropertyValue('--line').trim() || '#fff';
        for (let i=0;i<parts.length;i++){
          for (let j=i+1;j<parts.length;j++){
            const a=parts[i], b=parts[j];
            const dx=a.x-b.x, dy=a.y-b.y, d=Math.hypot(dx,dy);
            if (d < cfg.linkDist) {
              ctx.globalAlpha = (1 - d/cfg.linkDist) * cfg.lineAlpha;
              ctx.beginPath(); ctx.moveTo(a.x,a.y); ctx.lineTo(b.x,b.y);
              ctx.strokeStyle = line; ctx.lineWidth = 1; ctx.stroke();
              ctx.globalAlpha = 1;
            }
          }
        }
      }

      function init(){
        resize();
        parts = [];
        const n = (canvas.clientWidth < 700 ? cfg.countMobile : cfg.count);
        for (let i=0;i<n;i++) parts.push(new P());
        loop();
      }

      function loop(){
        ctx.clearRect(0,0,canvas.clientWidth,canvas.clientHeight);
        for (const p of parts){ p.step(); p.draw(); }
        connect();
        requestAnimationFrame(loop);
      }

      window.addEventListener('resize', resize);
      canvas.addEventListener('mousemove', e=>{
        const r = canvas.getBoundingClientRect();
        mouse.x = e.clientX - r.left; mouse.y = e.clientY - r.top;
      });
      canvas.addEventListener('mouseleave', ()=>{ mouse.x = mouse.y = null; });

      document.addEventListener('visibilitychange', ()=>{
      });

      init();
    })();
  </script>
</body>
</html>



